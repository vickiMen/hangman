{"ast":null,"code":"import _objectSpread from \"/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { Solution } from './Solution.js';\nimport { Score } from './Score.js';\nimport { Letters } from './Letters.js';\nimport { Start } from './Start.js';\nimport { EndGame } from './EndGame.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.selectLetter = letter => {\n      let localLetterStatus = _objectSpread({}, this.state.letterStatus);\n\n      localLetterStatus[letter] = true;\n      let localCounter = this.state.counter;\n      localCounter++;\n      this.setState({\n        letterStatus: localLetterStatus,\n        counter: localCounter\n      });\n    };\n\n    this.updateScore = () => {\n      let currentScore = this.state.score;\n      currentScore += 10;\n      this.setState({\n        score: currentScore\n      });\n    };\n\n    this.newGame = () => {\n      let localCounter = this.state.counter;\n      localCounter = 0;\n      let localSolution = [...this.state.solution];\n      localSolution.splice(0, 1);\n\n      let localLetterStatus = _objectSpread({}, this.state.letterStatus);\n\n      localLetterStatus = this._generateLetterStatuses();\n      this.setState({\n        counter: localCounter,\n        solution: localSolution,\n        letterStatus: localLetterStatus\n      });\n    };\n\n    this.state = {\n      letterStatus: this._generateLetterStatuses(),\n      solution: [{\n        word: 'pikachu',\n        hint: 'Pokemon?'\n      }, {\n        word: 'metal',\n        hint: 'Best music genre is...?'\n      }, {\n        word: 'metal',\n        hint: 'Best music genre is...?'\n      }],\n      score: 0,\n      counter: 0\n    };\n  }\n\n  _generateLetterStatuses() {\n    let alphabet = {};\n\n    for (let i = 0; i < 26; i++) {\n      alphabet[(i + 10).toString(36)] = false;\n    }\n\n    return alphabet;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Letters, {\n      letterStatus: this.state.letterStatus,\n      selectLetter: this.selectLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Score, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Solution, {\n      letterStatus: this.state.letterStatus,\n      solution: this.state.solution[0],\n      updateScore: this.updateScore,\n      counter: this.state.counter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(EndGame, {\n      letterStatus: this.state.letterStatus,\n      answer: this.state.solution[0].word,\n      counter: this.state.counter,\n      newGame: this.newGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App; // class App extends Component {\n//   constructor(){\n//     super()\n//     this.state = {\n//       letterStatus: this._generateLetterStatuses(),\n//       riddleShown: null,\n//       solutions: [\n//         {\n//           hint: 'Vicki\\'s favorite food',\n//           answer: 'Bamba'\n//         },\n//         {\n//           hint: 'Best music genre is...?',\n//           answer: 'Metal'\n//         },\n//         {\n//           hint: 'Best OS is...? (hint: not windows)',\n//           answer: 'Linux'\n//         },\n//         {\n//           hint: 'blabla',\n//           answer: 'blablablabalbalblabla'\n//         }\n//       ],\n//       answer: '_',\n//       score: 0\n//     }\n//   }\n//   _updateAnswer = (letter) => {\n//     this.setState({\n//       answer: letter\n//     })\n//   }\n//   _selectLetter = (letter) => {\n//     let newLetterStatus = {...this.state.letterStatus}\n//     newLetterStatus[letter] = true\n//     this.setState({\n//       letterStatus: newLetterStatus\n//     })\n//   }\n//   _generateLetterStatuses(){\n//     let alphabet = {}\n//     for (let i=0; i<26; i++){\n//         alphabet[((i+10).toString(36))] = false\n//     }\n//     return alphabet\n//   }\n//   _chooseRandomRiddle(riddlesArr){\n//     const randNum = Math.floor(Math.random() * riddlesArr.length)\n//     return riddlesArr[randNum]\n//   }\n//   _updateRiddle = (riddle) => {\n//     this.setState({\n//       riddleShown: riddle\n//     })\n//   }\n//   render () {\n//     if (this.state.riddleShown) {\n//       return (\n//         <div>\n//           <Score score={this.state.score}/>\n//           <Letters letterStatus={this.state.letterStatus} selectLetter={this._selectLetter} updateAnswer={this._updateAnswer} currentRiddle={this.state.riddleShown}/>\n//           <Solution letterStatus={this.state.letterStatus} solution={this.state.solutions[0]} updateRiddle={this._updateRiddle}/>\n//         </div>\n//       )\n//     }\n//     else {\n//       return(\n//         <div>\n//           <Start updateRiddle={this._updateRiddle}/>\n//         </div>\n//       )\n//     }\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/src/App.js"],"names":["React","Component","Solution","Score","Letters","Start","EndGame","App","constructor","selectLetter","letter","localLetterStatus","state","letterStatus","localCounter","counter","setState","updateScore","currentScore","score","newGame","localSolution","solution","splice","_generateLetterStatuses","word","hint","alphabet","i","toString","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Solution } from './Solution.js';\nimport { Score } from './Score.js';\nimport { Letters } from './Letters.js';\nimport { Start } from './Start.js';\nimport { EndGame } from './EndGame.js';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      letterStatus: this._generateLetterStatuses(),\n      solution: [\n        {\n          word: 'pikachu',\n          hint: 'Pokemon?' \n        },\n        {\n          word: 'metal',\n          hint: 'Best music genre is...?'\n        },\n        {\n          word: 'metal',\n          hint: 'Best music genre is...?'\n        }\n      ],\n      score: 0,\n      counter: 0\n    }\n  }\n\n  _generateLetterStatuses(){\n    let alphabet = {}\n    for (let i=0; i<26; i++){\n        alphabet[((i+10).toString(36))] = false\n    }\n    return alphabet\n  }\n\n  selectLetter = (letter) => {\n    let localLetterStatus = {...this.state.letterStatus}\n    localLetterStatus[letter] = true\n    let localCounter = this.state.counter\n    localCounter++\n    this.setState({\n      letterStatus: localLetterStatus,\n      counter: localCounter\n    })\n  }\n\n  updateScore = () => {\n    let currentScore = this.state.score\n    currentScore+=10\n    this.setState({\n      score: currentScore,\n    })\n  }\n\n  newGame = () => {\n    let localCounter = this.state.counter\n    localCounter = 0\n    let localSolution = [...this.state.solution]\n    localSolution.splice(0,1)\n    let localLetterStatus = {...this.state.letterStatus}\n    localLetterStatus = this._generateLetterStatuses()\n    this.setState({\n      counter: localCounter,\n      solution: localSolution,\n      letterStatus: localLetterStatus\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <Letters letterStatus={this.state.letterStatus} selectLetter={this.selectLetter}/>\n        <Score score={this.state.score}/>\n        <Solution letterStatus={this.state.letterStatus} solution={this.state.solution[0]} updateScore={this.updateScore} counter={this.state.counter}/>\n        <EndGame letterStatus={this.state.letterStatus} answer={this.state.solution[0].word} counter={this.state.counter} newGame={this.newGame}/>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n// class App extends Component {\n\n//   constructor(){\n//     super()\n//     this.state = {\n//       letterStatus: this._generateLetterStatuses(),\n//       riddleShown: null,\n//       solutions: [\n//         {\n//           hint: 'Vicki\\'s favorite food',\n//           answer: 'Bamba'\n//         },\n//         {\n//           hint: 'Best music genre is...?',\n//           answer: 'Metal'\n//         },\n//         {\n//           hint: 'Best OS is...? (hint: not windows)',\n//           answer: 'Linux'\n//         },\n//         {\n//           hint: 'blabla',\n//           answer: 'blablablabalbalblabla'\n//         }\n//       ],\n//       answer: '_',\n//       score: 0\n//     }\n//   }\n\n//   _updateAnswer = (letter) => {\n//     this.setState({\n//       answer: letter\n//     })\n//   }\n\n//   _selectLetter = (letter) => {\n//     let newLetterStatus = {...this.state.letterStatus}\n//     newLetterStatus[letter] = true\n//     this.setState({\n//       letterStatus: newLetterStatus\n//     })\n//   }\n  \n//   _generateLetterStatuses(){\n//     let alphabet = {}\n//     for (let i=0; i<26; i++){\n//         alphabet[((i+10).toString(36))] = false\n//     }\n//     return alphabet\n//   }\n\n//   _chooseRandomRiddle(riddlesArr){\n//     const randNum = Math.floor(Math.random() * riddlesArr.length)\n//     return riddlesArr[randNum]\n//   }\n\n//   _updateRiddle = (riddle) => {\n//     this.setState({\n//       riddleShown: riddle\n//     })\n//   }\n\n//   render () {\n//     if (this.state.riddleShown) {\n//       return (\n//         <div>\n//           <Score score={this.state.score}/>\n//           <Letters letterStatus={this.state.letterStatus} selectLetter={this._selectLetter} updateAnswer={this._updateAnswer} currentRiddle={this.state.riddleShown}/>\n//           <Solution letterStatus={this.state.letterStatus} solution={this.state.solutions[0]} updateRiddle={this._updateRiddle}/>\n//         </div>\n//       )\n//     }\n//     else {\n//       return(\n//         <div>\n//           <Start updateRiddle={this._updateRiddle}/>\n//         </div>\n//       )\n//     }\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}