{"ast":null,"code":"import _objectSpread from \"/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { Solution } from './Solution.js';\nimport { Score } from './Score.js';\nimport { Letters } from './Letters.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this._selectLetter = letter => {\n      let newLetterStatus = _objectSpread({}, this.state.letterStatus);\n\n      newLetterStatus[letter] = true;\n      this.setState({\n        letterStatus: newLetterStatus\n      });\n    };\n\n    this._chooseRandomRiddle = () => {\n      const randNum = Math.floor(Math.random() * this.state.solutions.length); // let copiedSolutions = [...this.state.solutions]\n\n      let chosenRiddle = !this.state.riddleShown ? this.setState({\n        riddleShown: this.state.solutions[randNum]\n      }) : null;\n      return this.state.riddleShown;\n    };\n\n    this.state = {\n      letterStatus: this._generateLetterStatuses(),\n      riddleShown: null,\n      solutions: [{\n        hint: 'Vicki\\'s favorite food',\n        answer: 'Bamba'\n      }, {\n        hint: 'Best music genre is...?',\n        answer: 'Metal'\n      }, {\n        hint: 'Best OS is...? (hint: not windows)',\n        answer: 'Linux'\n      }, {\n        hint: 'blabla',\n        answer: 'blablablabalbalblabla'\n      }],\n      score: 0\n    };\n  }\n\n  _generateLetterStatuses() {\n    let alphabet = {};\n\n    for (let i = 0; i < 26; i++) {\n      alphabet[(i + 10).toString(36)] = false;\n    }\n\n    return alphabet;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Score, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Letters, {\n      letterStatus: this.state.letterStatus,\n      selectLetter: this._selectLetter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Solution, {\n      letterStatus: this.state.letterStatus,\n      solution: this._chooseRandomRiddle(this.state.solutions),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vickimenashe/Documents/Elevation/week7/react-hangman-ex-vickiMen/hangman/src/App.js"],"names":["React","Component","Solution","Score","Letters","App","constructor","_selectLetter","letter","newLetterStatus","state","letterStatus","setState","_chooseRandomRiddle","randNum","Math","floor","random","solutions","length","chosenRiddle","riddleShown","_generateLetterStatuses","hint","answer","score","alphabet","i","toString","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAE1BK,EAAAA,WAAW,GAAE;AACX;;AADW,SA2BbC,aA3Ba,GA2BIC,MAAD,IAAY;AAC1B,UAAIC,eAAe,qBAAO,KAAKC,KAAL,CAAWC,YAAlB,CAAnB;;AACAF,MAAAA,eAAe,CAACD,MAAD,CAAf,GAA0B,IAA1B;AACA,WAAKI,QAAL,CAAc;AACZD,QAAAA,YAAY,EAAEF;AADF,OAAd;AAGD,KAjCY;;AAAA,SA2CbI,mBA3Ca,GA2CS,MAAM;AAC1B,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKP,KAAL,CAAWQ,SAAX,CAAqBC,MAAhD,CAAhB,CAD0B,CAE1B;;AACA,UAAIC,YAAY,GAChB,CAAC,KAAKV,KAAL,CAAWW,WAAZ,GACI,KAAKT,QAAL,CAAc;AAAES,QAAAA,WAAW,EAAE,KAAKX,KAAL,CAAWQ,SAAX,CAAqBJ,OAArB;AAAf,OAAd,CADJ,GAEI,IAHJ;AAIA,aAAO,KAAKJ,KAAL,CAAWW,WAAlB;AACD,KAnDY;;AAEX,SAAKX,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,KAAKW,uBAAL,EADH;AAEXD,MAAAA,WAAW,EAAE,IAFF;AAGXH,MAAAA,SAAS,EAAE,CACT;AACEK,QAAAA,IAAI,EAAE,wBADR;AAEEC,QAAAA,MAAM,EAAE;AAFV,OADS,EAKT;AACED,QAAAA,IAAI,EAAE,yBADR;AAEEC,QAAAA,MAAM,EAAE;AAFV,OALS,EAST;AACED,QAAAA,IAAI,EAAE,oCADR;AAEEC,QAAAA,MAAM,EAAE;AAFV,OATS,EAaT;AACED,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,MAAM,EAAE;AAFV,OAbS,CAHA;AAqBXC,MAAAA,KAAK,EAAE;AArBI,KAAb;AAuBD;;AAUDH,EAAAA,uBAAuB,GAAE;AACvB,QAAII,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAoBA,CAAC,EAArB,EAAwB;AACpBD,MAAAA,QAAQ,CAAE,CAACC,CAAC,GAAC,EAAH,EAAOC,QAAP,CAAgB,EAAhB,CAAF,CAAR,GAAkC,KAAlC;AACH;;AACD,WAAOF,QAAP;AACD;;AAYDG,EAAAA,MAAM,GAAI;AAER,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWe,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,KAAKf,KAAL,CAAWC,YAAlC;AAAgD,MAAA,YAAY,EAAE,KAAKJ,aAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE,KAAKG,KAAL,CAAWC,YAAnC;AAAiD,MAAA,QAAQ,EAAE,KAAKE,mBAAL,CAAyB,KAAKH,KAAL,CAAWQ,SAApC,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AAhEyB;;AAmE5B,eAAeb,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Solution } from './Solution.js';\nimport { Score } from './Score.js';\nimport { Letters } from './Letters.js';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      letterStatus: this._generateLetterStatuses(),\n      riddleShown: null,\n      solutions: [\n        {\n          hint: 'Vicki\\'s favorite food',\n          answer: 'Bamba'\n        },\n        {\n          hint: 'Best music genre is...?',\n          answer: 'Metal'\n        },\n        {\n          hint: 'Best OS is...? (hint: not windows)',\n          answer: 'Linux'\n        },\n        {\n          hint: 'blabla',\n          answer: 'blablablabalbalblabla'\n        }\n      ],\n      score: 0\n    }\n  }\n\n  _selectLetter = (letter) => {\n    let newLetterStatus = {...this.state.letterStatus}\n    newLetterStatus[letter] = true\n    this.setState({\n      letterStatus: newLetterStatus\n    })\n  }\n\n  _generateLetterStatuses(){\n    let alphabet = {}\n    for (let i=0; i<26; i++){\n        alphabet[((i+10).toString(36))] = false\n    }\n    return alphabet\n  }\n\n  _chooseRandomRiddle = () => {\n    const randNum = Math.floor(Math.random() * this.state.solutions.length)\n    // let copiedSolutions = [...this.state.solutions]\n    let chosenRiddle = \n    !this.state.riddleShown \n      ? this.setState({ riddleShown: this.state.solutions[randNum] })\n      : null\n    return this.state.riddleShown\n  }\n\n  render () {\n\n    return (\n      <div>\n        <Score score={this.state.score}/>\n        <Letters letterStatus={this.state.letterStatus} selectLetter={this._selectLetter} />\n        <Solution letterStatus={this.state.letterStatus} solution={this._chooseRandomRiddle(this.state.solutions)}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}